/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { parseGermanAddress } from '../../helpers/parser';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import { InputAnimations } from '../../animations';
export class MatSearchGoogleMapsAutocompleteComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.appearance = Appearance.STANDARD;
        this.searchAddressLabel = 'Search Address';
        this.streetNameLabel = 'Street';
        this.streetNumberLabel = 'Nr.';
        this.postalCodeLabel = 'PLZ';
        this.localityLabel = 'Locality';
        this.vicinityLabel = 'Vicinity';
        this.onGermanAddressMapped = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.addressFormGroup = this.createAddressFormGroup();
    }
    /**
     * @return {?}
     */
    createAddressFormGroup() {
        return this.formBuilder.group({
            streetName: [null, Validators.required],
            streetNumber: [null, Validators.required],
            postalCode: [null, Validators.required],
            vicinity: [null],
            locality: this.formBuilder.group({
                long: [null, Validators.required],
            }),
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    syncAutoComplete($event) {
        if (this.germanAddress) {
            this.addressFormGroup.reset();
        }
        /** @type {?} */
        const germanAddress = parseGermanAddress($event);
        this.germanAddress = germanAddress;
        if (germanAddress.vicinity) {
            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);
        }
        if (germanAddress.streetName) {
            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);
        }
        if (germanAddress.streetNumber) {
            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber);
        }
        if (germanAddress.postalCode) {
            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);
        }
        if (germanAddress.locality && germanAddress.locality.long) {
            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);
        }
        this.onGermanAddressMapped.emit(germanAddress);
    }
}
MatSearchGoogleMapsAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-google-maps-autocomplete',
                template: "<div fxLayout=\"column\">\n  <div fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n",
                animations: InputAnimations,
                styles: [""]
            }] }
];
/** @nocollapse */
MatSearchGoogleMapsAutocompleteComponent.ctorParameters = () => [
    { type: FormBuilder }
];
MatSearchGoogleMapsAutocompleteComponent.propDecorators = {
    appearance: [{ type: Input }],
    searchAddressLabel: [{ type: Input }],
    streetNameLabel: [{ type: Input }],
    streetNumberLabel: [{ type: Input }],
    postalCodeLabel: [{ type: Input }],
    localityLabel: [{ type: Input }],
    vicinityLabel: [{ type: Input }],
    showVicinity: [{ type: Input }],
    country: [{ type: Input }],
    placeIdOnly: [{ type: Input }],
    strictBounds: [{ type: Input }],
    types: [{ type: Input }],
    type: [{ type: Input }],
    readonly: [{ type: Input }],
    disableSearch: [{ type: Input }],
    onGermanAddressMapped: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.appearance;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.searchAddressLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.streetNameLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.streetNumberLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.postalCodeLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.localityLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.vicinityLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.showVicinity;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.country;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.placeIdOnly;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.strictBounds;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.types;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.type;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.readonly;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.disableSearch;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.onGermanAddressMapped;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.germanAddress;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.addressFormGroup;
    /**
     * @type {?}
     * @private
     */
    MatSearchGoogleMapsAutocompleteComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9nb29nbGUtbWFwcy1hdXRvY29tcGxldGUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlL21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFDLFdBQVcsRUFBYSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMkNBQTJDLENBQUM7QUFDckUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBUWpELE1BQU0sT0FBTyx3Q0FBd0M7Ozs7SUF1RG5ELFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBcEQ1QyxlQUFVLEdBQXdCLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFHdEQsdUJBQWtCLEdBQUcsZ0JBQWdCLENBQUM7UUFHdEMsb0JBQWUsR0FBRyxRQUFRLENBQUM7UUFHM0Isc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBRzFCLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBR3hCLGtCQUFhLEdBQUcsVUFBVSxDQUFDO1FBRzNCLGtCQUFhLEdBQUcsVUFBVSxDQUFDO1FBNEIzQiwwQkFBcUIsR0FBZ0MsSUFBSSxZQUFZLEVBQWlCLENBQUM7SUFPdkYsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsZ0JB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O0lBRWxCLGlFQUN1Qjs7SUFFdkIseUVBQ3VGOztJQUV2RixpRUFBNkI7O0lBQzdCLG9FQUE0Qjs7Ozs7SUFHaEIsK0RBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQge3BhcnNlR2VybWFuQWRkcmVzc30gZnJvbSAnLi4vLi4vaGVscGVycy9wYXJzZXInO1xuaW1wb3J0IHtHZXJtYW5BZGRyZXNzfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7QXBwZWFyYW5jZX0gZnJvbSAnLi4vbWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHtJbnB1dEFuaW1hdGlvbnN9IGZyb20gJy4uLy4uL2FuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IElucHV0QW5pbWF0aW9uc1xufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWFyY2hHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKVxuICBhcHBlYXJhbmNlOiBzdHJpbmcgfCBBcHBlYXJhbmNlID0gQXBwZWFyYW5jZS5TVEFOREFSRDtcblxuICBASW5wdXQoKVxuICBzZWFyY2hBZGRyZXNzTGFiZWwgPSAnU2VhcmNoIEFkZHJlc3MnO1xuXG4gIEBJbnB1dCgpXG4gIHN0cmVldE5hbWVMYWJlbCA9ICdTdHJlZXQnO1xuXG4gIEBJbnB1dCgpXG4gIHN0cmVldE51bWJlckxhYmVsID0gJ05yLic7XG5cbiAgQElucHV0KClcbiAgcG9zdGFsQ29kZUxhYmVsID0gJ1BMWic7XG5cbiAgQElucHV0KClcbiAgbG9jYWxpdHlMYWJlbCA9ICdMb2NhbGl0eSc7XG5cbiAgQElucHV0KClcbiAgdmljaW5pdHlMYWJlbCA9ICdWaWNpbml0eSc7XG5cbiAgQElucHV0KClcbiAgc2hvd1ZpY2luaXR5OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIGNvdW50cnk6IHN0cmluZyB8IHN0cmluZ1tdO1xuXG4gIEBJbnB1dCgpXG4gIHBsYWNlSWRPbmx5PzogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBzdHJpY3RCb3VuZHM/OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHR5cGVzPzogc3RyaW5nW107XG4gIC8vIHR5cGVzOiBzdHJpbmdbXSA9IFsnYWRkcmVzcyddO1xuXG4gIEBJbnB1dCgpXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgcmVhZG9ubHk6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZVNlYXJjaDogYm9vbGVhbjtcblxuICBAT3V0cHV0KClcbiAgb25HZXJtYW5BZGRyZXNzTWFwcGVkOiBFdmVudEVtaXR0ZXI8R2VybWFuQWRkcmVzcz4gPSBuZXcgRXZlbnRFbWl0dGVyPEdlcm1hbkFkZHJlc3M+KCk7XG5cbiAgZ2VybWFuQWRkcmVzczogR2VybWFuQWRkcmVzcztcbiAgYWRkcmVzc0Zvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cCA9IHRoaXMuY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpO1xuICB9XG5cbiAgY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpOiBGb3JtR3JvdXAge1xuICAgIHJldHVybiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIHN0cmVldE5hbWU6IFtudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgIHN0cmVldE51bWJlcjogW251bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgcG9zdGFsQ29kZTogW251bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgdmljaW5pdHk6IFtudWxsXSxcbiAgICAgIGxvY2FsaXR5OiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgbG9uZzogW251bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBzeW5jQXV0b0NvbXBsZXRlKCRldmVudDogZ29vZ2xlLm1hcHMucGxhY2VzLlBsYWNlUmVzdWx0KSB7XG4gICAgaWYgKHRoaXMuZ2VybWFuQWRkcmVzcykge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLnJlc2V0KCk7XG4gICAgfVxuICAgIGNvbnN0IGdlcm1hbkFkZHJlc3M6IEdlcm1hbkFkZHJlc3MgPSBwYXJzZUdlcm1hbkFkZHJlc3MoJGV2ZW50KTtcbiAgICB0aGlzLmdlcm1hbkFkZHJlc3MgPSBnZXJtYW5BZGRyZXNzO1xuICAgIGlmIChnZXJtYW5BZGRyZXNzLnZpY2luaXR5KSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAuZ2V0KCd2aWNpbml0eScpLnBhdGNoVmFsdWUoZ2VybWFuQWRkcmVzcy52aWNpbml0eSk7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLnN0cmVldE5hbWUpIHtcbiAgICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cC5nZXQoJ3N0cmVldE5hbWUnKS5wYXRjaFZhbHVlKGdlcm1hbkFkZHJlc3Muc3RyZWV0TmFtZSk7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLnN0cmVldE51bWJlcikge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLmdldCgnc3RyZWV0TnVtYmVyJykucGF0Y2hWYWx1ZShnZXJtYW5BZGRyZXNzLnN0cmVldE51bWJlcik7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLnBvc3RhbENvZGUpIHtcbiAgICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cC5nZXQoJ3Bvc3RhbENvZGUnKS5wYXRjaFZhbHVlKGdlcm1hbkFkZHJlc3MucG9zdGFsQ29kZSk7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLmxvY2FsaXR5ICYmIGdlcm1hbkFkZHJlc3MubG9jYWxpdHkubG9uZykge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLmdldCgnbG9jYWxpdHkubG9uZycpLnBhdGNoVmFsdWUoZ2VybWFuQWRkcmVzcy5sb2NhbGl0eS5sb25nKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uR2VybWFuQWRkcmVzc01hcHBlZC5lbWl0KGdlcm1hbkFkZHJlc3MpO1xuICB9XG5cbn1cbiJdfQ==