{"version":3,"sources":["ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts"],"names":["MatValidateAddressDirective","prototype","validate","_this","this","control","address","validateAddress","valid","subscribe","eventEmitter","subscription","unsubscribe","Object","defineProperty","_address","value","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","Appearance","STANDARD","FILL","OUTLINE","LEGACY","MatGoogleMapsAutocompleteComponent","mapsAPILoader","ngZone","addressLabelText","placeholderText","requiredErrorText","invalidErrorText","appearance","autoCompleteOptions","onChange","EventEmitter","onAutocompleteSelected","onGermanAddressMapped","onLocationSelected","onNewPlaceResult","addressValidator","addressSearchControl","FormControl","Validators","compose","required","ngOnInit","options","placeIdOnly","strictBounds","type","country","componentRestrictions","types","assign","initGoogleMapsAutocomplete","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","nativeElement","addListener","run","place","getPlace","germanAddress","gmID","id","icon","url","placeID","place_id","displayAddress","formatted_address","name","vicinity","locality","state","geoLocation","latitude","longitude","geometry","location","lat","lng","address_components","forEach","indexOf","streetNumber","Number","short_name","streetName","long_name","postalCode","sublocality","long","short","emit","undefined","catch","err","console","log","onQuery","event","resetAddress","updateValueAndValidity","Component","exportAs","template","MapsAPILoader","NgZone","ViewChild","static","Input","Output","customAnimation","animation","style","opacity","transform","animate","params","duration","delay","scale","x","y","z","InputAnimations","trigger","transition","useAnimation","query","stagger","animateChild","optional","MatSearchGoogleMapsAutocompleteComponent","formBuilder","searchAddressLabel","streetNameLabel","streetNumberLabel","postalCodeLabel","localityLabel","vicinityLabel","addressFormGroup","createAddressFormGroup","group","syncAutoComplete","$event","reset","placeResult","length","parseGermanAddress","get","patchValue","animations","FormBuilder","MatGoogleMapsAutocompleteDirective","platformId","elemRef","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","MatGoogleMapsAutocompleteModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule","exports","declarations"],"mappings":"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","sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss']\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit {\n\n  @ViewChild('search', {static: false})\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = Number(value.short_name);\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit {\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.addressFormGroup = this.createAddressFormGroup();\n  }\n\n  createAddressFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      streetName: [null, Validators.required],\n      streetNumber: [null, Validators.required],\n      postalCode: [null, Validators.required],\n      vicinity: [null],\n      locality: this.formBuilder.group({\n        long: [null, Validators.required],\n      }),\n    });\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber);\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\n    }\n\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = Number(value.short_name);\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = Number(value.short_name);\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule, MatInputModule} from '@angular/material';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n"]}