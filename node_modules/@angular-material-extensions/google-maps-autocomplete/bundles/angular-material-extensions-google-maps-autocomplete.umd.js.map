{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.umd.js","sources":["ng://@angular-material-extensions/google-maps-autocomplete/lib/interfaces/germand.address.interface.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/interfaces/location.interface.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts"],"sourcesContent":["import {Location} from './location.interface';\n\n/**\n * @author Anthony Nahas\n * @since 23.12.19\n * @version 1.0\n */\nexport interface GermanAddress {\n  id?: string;\n  gmID: string;\n  placeID: string;\n  name?: string;\n  icon?: string;\n  displayAddress?: string;\n  postalCode?: number;\n  streetNumber?: number;\n  streetName?: string;\n  sublocality?: string;\n  locality?: {\n    short?: string;\n    long?: string;\n  };\n  state?: {\n    short?: string;\n    long?: string;\n  };\n  country?: {\n    short?: string;\n    long?: string;\n  };\n  vicinity?: string;\n  url?: string;\n  geoLocation?: Location;\n}\n","export interface Location {\n  latitude: number;\n  longitude: number;\n}\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {Component, ElementRef, EventEmitter, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss']\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit {\n\n  @ViewChild('search', {static: false})\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = Number(value.short_name);\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = Number(value.short_name);\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit {\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.addressFormGroup = this.createAddressFormGroup();\n  }\n\n  createAddressFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      streetName: [null, Validators.required],\n      streetNumber: [null, Validators.required],\n      postalCode: [null, Validators.required],\n      vicinity: [null],\n      locality: this.formBuilder.group({\n        long: [null, Validators.required],\n      }),\n    });\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber);\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\n    }\n\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n}\n","import {Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = Number(value.short_name);\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule, MatInputModule} from '@angular/material';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n"],"names":["Directive","NG_VALIDATORS","forwardRef","EventEmitter","FormControl","Validators","Component","MapsAPILoader","NgZone","ViewChild","Input","Output","animation","style","animate","trigger","transition","useAnimation","state","query","stagger","animateChild","FormBuilder","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","NgModule","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule"],"mappings":"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"}