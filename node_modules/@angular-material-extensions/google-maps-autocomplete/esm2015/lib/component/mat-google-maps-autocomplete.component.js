/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/mat-google-maps-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { MapsAPILoader } from '@agm/core';
import { MatValidateAddressDirective } from '../directives/address-validator/mat-address-validator.directive';
/** @enum {string} */
const Appearance = {
    STANDARD: "standard",
    FILL: "fill",
    OUTLINE: "outline",
    LEGACY: "legacy",
};
export { Appearance };
export class MatGoogleMapsAutocompleteComponent {
    /**
     * @param {?} mapsAPILoader
     * @param {?} ngZone
     */
    constructor(mapsAPILoader, ngZone) {
        this.mapsAPILoader = mapsAPILoader;
        this.ngZone = ngZone;
        this.addressLabelText = 'Address';
        this.placeholderText = 'Please enter the address';
        this.requiredErrorText = 'The address is required';
        this.invalidErrorText = 'The address is not valid';
        this.appearance = Appearance.STANDARD;
        this.autoCompleteOptions = {};
        this.onChange = new EventEmitter();
        this.onAutocompleteSelected = new EventEmitter();
        this.onGermanAddressMapped = new EventEmitter();
        this.onLocationSelected = new EventEmitter();
        this.onNewPlaceResult = new EventEmitter();
        this.addressValidator = new MatValidateAddressDirective();
        this.addressSearchControl = new FormControl({ value: null }, Validators.compose([
            Validators.required,
            this.addressValidator.validate()
        ]));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.addressValidator.subscribe(this.onNewPlaceResult);
        /** @type {?} */
        const options = {
            // types: ['address'],
            // componentRestrictions: {country: this.country},
            placeIdOnly: this.placeIdOnly,
            strictBounds: this.strictBounds,
            // types: this.types,
            type: this.type
        };
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.componentRestrictions = { country: this.country } : null;
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.types = this.types : null;
        this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
        this.initGoogleMapsAutocomplete();
    }
    /**
     * @return {?}
     */
    initGoogleMapsAutocomplete() {
        this.mapsAPILoader
            .load()
            .then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);
            autocomplete.addListener('place_changed', (/**
             * @return {?}
             */
            () => {
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => {
                    // get the place result
                    /** @type {?} */
                    const place = autocomplete.getPlace();
                    /** @type {?} */
                    const germanAddress = {
                        gmID: place.id,
                        icon: place.icon,
                        url: place.url,
                        placeID: place.place_id,
                        displayAddress: place.formatted_address,
                        name: place.name,
                        vicinity: place.vicinity,
                        locality: {},
                        state: {},
                        country: {},
                        geoLocation: { latitude: -1, longitude: -1 },
                    };
                    if (place.geometry && place.geometry.location) {
                        germanAddress.geoLocation.latitude = place.geometry.location.lat();
                        germanAddress.geoLocation.longitude = place.geometry.location.lng();
                    }
                    place.address_components.forEach((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => {
                        if (value.types.indexOf('street_number') > -1) {
                            germanAddress.streetNumber = Number(value.short_name);
                        }
                        if (value.types.indexOf('route') > -1) {
                            germanAddress.streetName = value.long_name;
                        }
                        if (value.types.indexOf('postal_code') > -1) {
                            germanAddress.postalCode = Number(value.short_name);
                        }
                        if (value.types.indexOf('sublocality') > -1) {
                            germanAddress.sublocality = value.long_name;
                        }
                        if (value.types.indexOf('locality') > -1) {
                            germanAddress.locality.long = value.long_name;
                            germanAddress.locality.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_1') > -1) {
                            germanAddress.state.long = value.long_name;
                            germanAddress.state.short = value.short_name;
                        }
                        if (value.types.indexOf('country') > -1) {
                            germanAddress.country.long = value.long_name;
                            germanAddress.country.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_3') > -1) {
                            germanAddress.locality.short = value.short_name;
                        }
                    }));
                    this.onGermanAddressMapped.emit(germanAddress);
                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {
                        // place result is not valid
                        return;
                    }
                    else {
                        // show dialog to select a address from the input
                        // emit failed event
                    }
                    this.address = place.formatted_address;
                    this.onAutocompleteSelected.emit(place);
                    // console.log('onAutocompleteSelected -> ', place);
                    this.onLocationSelected.emit({
                        latitude: place.geometry.location.lat(),
                        longitude: place.geometry.location.lng()
                    });
                }));
            }));
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => console.log(err)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onQuery(event) {
        // console.log('onChange()', event);
        this.onChange.emit(this.address);
    }
    /**
     * @private
     * @return {?}
     */
    resetAddress() {
        this.address = null;
        this.addressSearchControl.updateValueAndValidity();
    }
}
MatGoogleMapsAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-google-maps-autocomplete',
                exportAs: 'matGoogleMapsAutocomplete',
                template: "<mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n  <mat-label>{{addressLabelText}}</mat-label>\n  <input matInput\n         [(ngModel)]=\"address\"\n         (change)=\"onQuery($event)\"\n         placeholder=\"{{placeholderText}}\"\n         class=\"form-control\"\n         #search\n         MatValidateAddress\n         required>\n  <mat-error *ngIf=\"addressSearchControl.hasError('required')\">\n    {{requiredErrorText}}\n  </mat-error>\n  <mat-error *ngIf=\"addressSearchControl.hasError('validateAddress')\">\n    {{invalidErrorText}}\n  </mat-error>\n</mat-form-field>\n",
                styles: [".full-width{width:100%}"]
            }] }
];
/** @nocollapse */
MatGoogleMapsAutocompleteComponent.ctorParameters = () => [
    { type: MapsAPILoader },
    { type: NgZone }
];
MatGoogleMapsAutocompleteComponent.propDecorators = {
    searchElementRef: [{ type: ViewChild, args: ['search', { static: false },] }],
    addressLabelText: [{ type: Input }],
    placeholderText: [{ type: Input }],
    requiredErrorText: [{ type: Input }],
    invalidErrorText: [{ type: Input }],
    appearance: [{ type: Input }],
    address: [{ type: Input }],
    country: [{ type: Input }],
    placeIdOnly: [{ type: Input }],
    strictBounds: [{ type: Input }],
    types: [{ type: Input }],
    type: [{ type: Input }],
    autoCompleteOptions: [{ type: Input }],
    onChange: [{ type: Output }],
    onAutocompleteSelected: [{ type: Output }],
    onGermanAddressMapped: [{ type: Output }],
    onLocationSelected: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.searchElementRef;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.addressLabelText;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.placeholderText;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.requiredErrorText;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.invalidErrorText;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.appearance;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.address;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.country;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.placeIdOnly;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.strictBounds;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.types;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.type;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.autoCompleteOptions;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.onChange;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.onAutocompleteSelected;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.onGermanAddressMapped;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.onLocationSelected;
    /**
     * @type {?}
     * @private
     */
    MatGoogleMapsAutocompleteComponent.prototype.onNewPlaceResult;
    /**
     * @type {?}
     * @private
     */
    MatGoogleMapsAutocompleteComponent.prototype.addressValidator;
    /** @type {?} */
    MatGoogleMapsAutocompleteComponent.prototype.addressSearchControl;
    /**
     * @type {?}
     * @private
     */
    MatGoogleMapsAutocompleteComponent.prototype.mapsAPILoader;
    /**
     * @type {?}
     * @private
     */
    MatGoogleMapsAutocompleteComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,